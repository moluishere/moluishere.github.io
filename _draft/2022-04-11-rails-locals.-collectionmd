---
title: "【Ruby】每天一點 Rails：render partial collection in rails -- day 02 "
date: 2022-04-08
categories:
  - blog
tags:
  - Rails
  - MVC
---

介紹 MVC 架構與 Rails

<center>
    <img style="border-radius: 0.3125em;
    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" 
    src="https://miro.medium.com/max/1400/0*eTJjwn4OQ1jD-GRU.png">
    <br>
    <div style="color:orange;
    display: inline-block;
    color: #999;
    padding: 2px; font-size:14px">photo by Rafael D. Hernandez on freeCodeCamp</div>
</center>

> 前提：初學者的學習筆記，僅供參考，敬請指教～

## 什麼是 MVC？

MVC - Model、View、Controller，是一種設計架構與開發邏輯。
**Rails 即是基於 MVC 架構進行開發**。

以下說明 MVC 各自負責的部分：

- Model： 負責與資料庫溝通、處理資料邏輯。
- Views： 負責畫面呈現。
- Controller：負責處理傳進來的資料流向、流程控制。

我們可以把 Controller 想成一個控制中心，它負責指揮 Model 與 Views，指示 Model 向資料庫取用資料、決定頁面邏輯、指定渲染哪個檔案等等。

簡單來說 MVC 就是 「控制歸控制，資料歸資料，畫面歸畫面」。
基本的邏輯會是 「Controller 請 Model 處理資料，並設計資料流向，再讓 Views 被動接受資料並呈現畫面。」

## 為什麼要使用 MVC？

如上所述，MVC 的目的就是分工，使用 MVC 架構的好處，在於這三者彼此獨立、各司其職，方便團隊進行開發，程式碼易於維護，更重要的是基於 MVC 架構的慣例，我們在接手專案的時候，可以對專案架構快速有個基礎的認識。

## Rails 與 MVC

由於 Rails 是基於 MVC 開發，再加上 Rails 的核心理念「慣例優於設定」（Convention Over Configuration）。Rails 專案中的資料夾結構、MVC 檔案的命名方式等都有相應的慣例，照著慣例走，我們可以減少花在設定上的力氣，把更多精力放在開發本身。

參考資料：

- [The Model View Controller Pattern – MVC Architecture and Frameworks Explained](https://www.freecodecamp.org/news/the-model-view-controller-pattern-mvc-architecture-and-frameworks-explained/)（Rafael D. Hernandez）
- [Model、View、Controller 三分天下](https://railsbook.tw/chapters/10-mvc) （高見龍）
